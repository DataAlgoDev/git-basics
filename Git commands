# -----------
Git commands
# -----------

# Setup and startup

git init : to initialize the selected folder as git working directory
git status : Shows status of working tree

# Adding files to staging area (index file)

git add <file> : To add file to staging area
git add . : To add all files in the directory to staging area

# Create user config before commiting files

git config --global user.email "ajaynarayanan11@gmail.com"
git config --global user.name "AjayN"

# Commiting files (Adding files to object folder, or saving)
git commit -m "<message>" : Saves all the staged files(files that are being tracked in the index area)
git commit -a -m "" : Adds files to staging area if not already added and then commits the change

# Git logs
git log : to view commit history. (q to exit)
git show : to see details about a specific commit, including what changes were made.
git reflog :  Shows all activity of the head with its hash value in the current working branch

# Checkout / branching

git checkout <commit id> : switches to the branch at that time of commit
git checkout master : switches back to master branch
git branch : To list all the branches
git branch <branch-name> :  To create new branch
git branch -b <branch-name> : Create new branch and switch to that branch

# Merging a branch to another

git checkout <target branch> : Switch to target branch to which it be merged
git merge <branch-name> : Name of the branch to be merged


# Deleting files

git ls-files : To list the files present in staging area
git rm <file-name> :  To remove file from direcory and staging area

# To revert the changes in staged files which was not commited

git checkout <file-name> | git restore <file>: To revert specific file
git checkout . | git restore . : To revert all the changes in file to last commit

git restore : if file was staged already then  do 'git checkout'

# Git cleanup

git clean -dn : Shows Cleans up details
git clean -df :  Force cleanup without showing details

# Git reset

git reset --soft HEAD~1 : Soft resetting current branch head back to one last commit

# Deleting branches

git branch -d <branches name space seperated>: Only allows removal of branch if that branch is already merged to master
git branch -D <branches name space seperated>: Force delete even if it is not merged

# Detatched head

Detatched Head : When you go to a specific previous commit id, head becomes a detached head
To save the changes if switching to a different branch, create branch with that detatched head id and then merge

# Git Ignore

To ignore any file / that need not to be tracked by git, create .gitignore file and add the list of files to be ignored inside of it